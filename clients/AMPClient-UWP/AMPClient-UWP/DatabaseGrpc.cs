// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: database.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Database {
  public static partial class Database
  {
    static readonly string __ServiceName = "database.Database";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Database.ArtistRequest> __Marshaller_database_ArtistRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Database.ArtistRequest.Parser));
    static readonly grpc::Marshaller<global::Database.AlbumList> __Marshaller_database_AlbumList = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Database.AlbumList.Parser));
    static readonly grpc::Marshaller<global::Common.Empty> __Marshaller_common_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Common.Empty.Parser));
    static readonly grpc::Marshaller<global::Database.ArtistAlbumMap> __Marshaller_database_ArtistAlbumMap = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Database.ArtistAlbumMap.Parser));
    static readonly grpc::Marshaller<global::Database.ArtistList> __Marshaller_database_ArtistList = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Database.ArtistList.Parser));
    static readonly grpc::Marshaller<global::Database.GenreList> __Marshaller_database_GenreList = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Database.GenreList.Parser));

    static readonly grpc::Method<global::Database.ArtistRequest, global::Database.AlbumList> __Method_GetArtistAlbums = new grpc::Method<global::Database.ArtistRequest, global::Database.AlbumList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetArtistAlbums",
        __Marshaller_database_ArtistRequest,
        __Marshaller_database_AlbumList);

    static readonly grpc::Method<global::Common.Empty, global::Database.ArtistAlbumMap> __Method_GetArtistsWithAlbums = new grpc::Method<global::Common.Empty, global::Database.ArtistAlbumMap>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetArtistsWithAlbums",
        __Marshaller_common_Empty,
        __Marshaller_database_ArtistAlbumMap);

    static readonly grpc::Method<global::Common.Empty, global::Database.AlbumList> __Method_GetAlbums = new grpc::Method<global::Common.Empty, global::Database.AlbumList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAlbums",
        __Marshaller_common_Empty,
        __Marshaller_database_AlbumList);

    static readonly grpc::Method<global::Common.Empty, global::Database.ArtistList> __Method_GetArtists = new grpc::Method<global::Common.Empty, global::Database.ArtistList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetArtists",
        __Marshaller_common_Empty,
        __Marshaller_database_ArtistList);

    static readonly grpc::Method<global::Common.Empty, global::Database.GenreList> __Method_GetGenres = new grpc::Method<global::Common.Empty, global::Database.GenreList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetGenres",
        __Marshaller_common_Empty,
        __Marshaller_database_GenreList);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Database.DatabaseReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Database</summary>
    [grpc::BindServiceMethod(typeof(Database), "BindService")]
    public abstract partial class DatabaseBase
    {
      /// <summary>
      /// artist related functions
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Database.AlbumList> GetArtistAlbums(global::Database.ArtistRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Database.ArtistAlbumMap> GetArtistsWithAlbums(global::Common.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// getters for all types
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Database.AlbumList> GetAlbums(global::Common.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Database.ArtistList> GetArtists(global::Common.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Database.GenreList> GetGenres(global::Common.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Database</summary>
    public partial class DatabaseClient : grpc::ClientBase<DatabaseClient>
    {
      /// <summary>Creates a new client for Database</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public DatabaseClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Database that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public DatabaseClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected DatabaseClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected DatabaseClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// artist related functions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Database.AlbumList GetArtistAlbums(global::Database.ArtistRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetArtistAlbums(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// artist related functions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Database.AlbumList GetArtistAlbums(global::Database.ArtistRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetArtistAlbums, null, options, request);
      }
      /// <summary>
      /// artist related functions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Database.AlbumList> GetArtistAlbumsAsync(global::Database.ArtistRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetArtistAlbumsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// artist related functions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Database.AlbumList> GetArtistAlbumsAsync(global::Database.ArtistRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetArtistAlbums, null, options, request);
      }
      public virtual global::Database.ArtistAlbumMap GetArtistsWithAlbums(global::Common.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetArtistsWithAlbums(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Database.ArtistAlbumMap GetArtistsWithAlbums(global::Common.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetArtistsWithAlbums, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Database.ArtistAlbumMap> GetArtistsWithAlbumsAsync(global::Common.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetArtistsWithAlbumsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Database.ArtistAlbumMap> GetArtistsWithAlbumsAsync(global::Common.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetArtistsWithAlbums, null, options, request);
      }
      /// <summary>
      /// getters for all types
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Database.AlbumList GetAlbums(global::Common.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAlbums(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// getters for all types
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Database.AlbumList GetAlbums(global::Common.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAlbums, null, options, request);
      }
      /// <summary>
      /// getters for all types
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Database.AlbumList> GetAlbumsAsync(global::Common.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAlbumsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// getters for all types
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Database.AlbumList> GetAlbumsAsync(global::Common.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAlbums, null, options, request);
      }
      public virtual global::Database.ArtistList GetArtists(global::Common.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetArtists(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Database.ArtistList GetArtists(global::Common.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetArtists, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Database.ArtistList> GetArtistsAsync(global::Common.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetArtistsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Database.ArtistList> GetArtistsAsync(global::Common.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetArtists, null, options, request);
      }
      public virtual global::Database.GenreList GetGenres(global::Common.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGenres(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Database.GenreList GetGenres(global::Common.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetGenres, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Database.GenreList> GetGenresAsync(global::Common.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGenresAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Database.GenreList> GetGenresAsync(global::Common.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetGenres, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override DatabaseClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DatabaseClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(DatabaseBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetArtistAlbums, serviceImpl.GetArtistAlbums)
          .AddMethod(__Method_GetArtistsWithAlbums, serviceImpl.GetArtistsWithAlbums)
          .AddMethod(__Method_GetAlbums, serviceImpl.GetAlbums)
          .AddMethod(__Method_GetArtists, serviceImpl.GetArtists)
          .AddMethod(__Method_GetGenres, serviceImpl.GetGenres).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, DatabaseBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetArtistAlbums, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Database.ArtistRequest, global::Database.AlbumList>(serviceImpl.GetArtistAlbums));
      serviceBinder.AddMethod(__Method_GetArtistsWithAlbums, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Common.Empty, global::Database.ArtistAlbumMap>(serviceImpl.GetArtistsWithAlbums));
      serviceBinder.AddMethod(__Method_GetAlbums, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Common.Empty, global::Database.AlbumList>(serviceImpl.GetAlbums));
      serviceBinder.AddMethod(__Method_GetArtists, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Common.Empty, global::Database.ArtistList>(serviceImpl.GetArtists));
      serviceBinder.AddMethod(__Method_GetGenres, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Common.Empty, global::Database.GenreList>(serviceImpl.GetGenres));
    }

  }
}
#endregion
