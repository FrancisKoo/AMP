// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: player.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Player {
  public static partial class Player
  {
    static readonly string __ServiceName = "player.Player";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Player.SongRequest> __Marshaller_player_SongRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Player.SongRequest.Parser));
    static readonly grpc::Marshaller<global::Player.ActionStatus> __Marshaller_player_ActionStatus = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Player.ActionStatus.Parser));
    static readonly grpc::Marshaller<global::Common.Empty> __Marshaller_common_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Common.Empty.Parser));

    static readonly grpc::Method<global::Player.SongRequest, global::Player.ActionStatus> __Method_PlaySong = new grpc::Method<global::Player.SongRequest, global::Player.ActionStatus>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PlaySong",
        __Marshaller_player_SongRequest,
        __Marshaller_player_ActionStatus);

    static readonly grpc::Method<global::Common.Empty, global::Player.ActionStatus> __Method_Play = new grpc::Method<global::Common.Empty, global::Player.ActionStatus>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Play",
        __Marshaller_common_Empty,
        __Marshaller_player_ActionStatus);

    static readonly grpc::Method<global::Common.Empty, global::Player.ActionStatus> __Method_Pause = new grpc::Method<global::Common.Empty, global::Player.ActionStatus>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Pause",
        __Marshaller_common_Empty,
        __Marshaller_player_ActionStatus);

    static readonly grpc::Method<global::Common.Empty, global::Player.ActionStatus> __Method_Stop = new grpc::Method<global::Common.Empty, global::Player.ActionStatus>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Stop",
        __Marshaller_common_Empty,
        __Marshaller_player_ActionStatus);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Player.PlayerReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Player</summary>
    [grpc::BindServiceMethod(typeof(Player), "BindService")]
    public abstract partial class PlayerBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Player.ActionStatus> PlaySong(global::Player.SongRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// actions
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Player.ActionStatus> Play(global::Common.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Player.ActionStatus> Pause(global::Common.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Player.ActionStatus> Stop(global::Common.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Player</summary>
    public partial class PlayerClient : grpc::ClientBase<PlayerClient>
    {
      /// <summary>Creates a new client for Player</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public PlayerClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Player that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public PlayerClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected PlayerClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected PlayerClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Player.ActionStatus PlaySong(global::Player.SongRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PlaySong(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Player.ActionStatus PlaySong(global::Player.SongRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PlaySong, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Player.ActionStatus> PlaySongAsync(global::Player.SongRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PlaySongAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Player.ActionStatus> PlaySongAsync(global::Player.SongRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PlaySong, null, options, request);
      }
      /// <summary>
      /// actions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Player.ActionStatus Play(global::Common.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Play(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// actions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Player.ActionStatus Play(global::Common.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Play, null, options, request);
      }
      /// <summary>
      /// actions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Player.ActionStatus> PlayAsync(global::Common.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PlayAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// actions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Player.ActionStatus> PlayAsync(global::Common.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Play, null, options, request);
      }
      public virtual global::Player.ActionStatus Pause(global::Common.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Pause(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Player.ActionStatus Pause(global::Common.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Pause, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Player.ActionStatus> PauseAsync(global::Common.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PauseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Player.ActionStatus> PauseAsync(global::Common.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Pause, null, options, request);
      }
      public virtual global::Player.ActionStatus Stop(global::Common.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Stop(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Player.ActionStatus Stop(global::Common.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Stop, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Player.ActionStatus> StopAsync(global::Common.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StopAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Player.ActionStatus> StopAsync(global::Common.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Stop, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override PlayerClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new PlayerClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(PlayerBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_PlaySong, serviceImpl.PlaySong)
          .AddMethod(__Method_Play, serviceImpl.Play)
          .AddMethod(__Method_Pause, serviceImpl.Pause)
          .AddMethod(__Method_Stop, serviceImpl.Stop).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, PlayerBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_PlaySong, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Player.SongRequest, global::Player.ActionStatus>(serviceImpl.PlaySong));
      serviceBinder.AddMethod(__Method_Play, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Common.Empty, global::Player.ActionStatus>(serviceImpl.Play));
      serviceBinder.AddMethod(__Method_Pause, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Common.Empty, global::Player.ActionStatus>(serviceImpl.Pause));
      serviceBinder.AddMethod(__Method_Stop, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Common.Empty, global::Player.ActionStatus>(serviceImpl.Stop));
    }

  }
}
#endregion
