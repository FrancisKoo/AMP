// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: player.proto

#include "player.pb.h"
#include "player.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace player {

static const char* Player_method_names[] = {
  "/player.Player/PlaySong",
  "/player.Player/Play",
  "/player.Player/Pause",
  "/player.Player/Stop",
};

std::unique_ptr< Player::Stub> Player::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Player::Stub> stub(new Player::Stub(channel));
  return stub;
}

Player::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_PlaySong_(Player_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Play_(Player_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Pause_(Player_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Stop_(Player_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Player::Stub::PlaySong(::grpc::ClientContext* context, const ::player::SongRequest& request, ::player::ActionStatus* response) {
  return ::grpc::internal::BlockingUnaryCall< ::player::SongRequest, ::player::ActionStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PlaySong_, context, request, response);
}

void Player::Stub::experimental_async::PlaySong(::grpc::ClientContext* context, const ::player::SongRequest* request, ::player::ActionStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::player::SongRequest, ::player::ActionStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PlaySong_, context, request, response, std::move(f));
}

void Player::Stub::experimental_async::PlaySong(::grpc::ClientContext* context, const ::player::SongRequest* request, ::player::ActionStatus* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PlaySong_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::player::ActionStatus>* Player::Stub::PrepareAsyncPlaySongRaw(::grpc::ClientContext* context, const ::player::SongRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::player::ActionStatus, ::player::SongRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PlaySong_, context, request);
}

::grpc::ClientAsyncResponseReader< ::player::ActionStatus>* Player::Stub::AsyncPlaySongRaw(::grpc::ClientContext* context, const ::player::SongRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPlaySongRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Player::Stub::Play(::grpc::ClientContext* context, const ::common::Empty& request, ::player::ActionStatus* response) {
  return ::grpc::internal::BlockingUnaryCall< ::common::Empty, ::player::ActionStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Play_, context, request, response);
}

void Player::Stub::experimental_async::Play(::grpc::ClientContext* context, const ::common::Empty* request, ::player::ActionStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::common::Empty, ::player::ActionStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Play_, context, request, response, std::move(f));
}

void Player::Stub::experimental_async::Play(::grpc::ClientContext* context, const ::common::Empty* request, ::player::ActionStatus* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Play_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::player::ActionStatus>* Player::Stub::PrepareAsyncPlayRaw(::grpc::ClientContext* context, const ::common::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::player::ActionStatus, ::common::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Play_, context, request);
}

::grpc::ClientAsyncResponseReader< ::player::ActionStatus>* Player::Stub::AsyncPlayRaw(::grpc::ClientContext* context, const ::common::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPlayRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Player::Stub::Pause(::grpc::ClientContext* context, const ::common::Empty& request, ::player::ActionStatus* response) {
  return ::grpc::internal::BlockingUnaryCall< ::common::Empty, ::player::ActionStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Pause_, context, request, response);
}

void Player::Stub::experimental_async::Pause(::grpc::ClientContext* context, const ::common::Empty* request, ::player::ActionStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::common::Empty, ::player::ActionStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Pause_, context, request, response, std::move(f));
}

void Player::Stub::experimental_async::Pause(::grpc::ClientContext* context, const ::common::Empty* request, ::player::ActionStatus* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Pause_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::player::ActionStatus>* Player::Stub::PrepareAsyncPauseRaw(::grpc::ClientContext* context, const ::common::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::player::ActionStatus, ::common::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Pause_, context, request);
}

::grpc::ClientAsyncResponseReader< ::player::ActionStatus>* Player::Stub::AsyncPauseRaw(::grpc::ClientContext* context, const ::common::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPauseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Player::Stub::Stop(::grpc::ClientContext* context, const ::common::Empty& request, ::player::ActionStatus* response) {
  return ::grpc::internal::BlockingUnaryCall< ::common::Empty, ::player::ActionStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Stop_, context, request, response);
}

void Player::Stub::experimental_async::Stop(::grpc::ClientContext* context, const ::common::Empty* request, ::player::ActionStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::common::Empty, ::player::ActionStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, std::move(f));
}

void Player::Stub::experimental_async::Stop(::grpc::ClientContext* context, const ::common::Empty* request, ::player::ActionStatus* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::player::ActionStatus>* Player::Stub::PrepareAsyncStopRaw(::grpc::ClientContext* context, const ::common::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::player::ActionStatus, ::common::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Stop_, context, request);
}

::grpc::ClientAsyncResponseReader< ::player::ActionStatus>* Player::Stub::AsyncStopRaw(::grpc::ClientContext* context, const ::common::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStopRaw(context, request, cq);
  result->StartCall();
  return result;
}

Player::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Player_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Player::Service, ::player::SongRequest, ::player::ActionStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Player::Service* service,
             ::grpc::ServerContext* ctx,
             const ::player::SongRequest* req,
             ::player::ActionStatus* resp) {
               return service->PlaySong(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Player_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Player::Service, ::common::Empty, ::player::ActionStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Player::Service* service,
             ::grpc::ServerContext* ctx,
             const ::common::Empty* req,
             ::player::ActionStatus* resp) {
               return service->Play(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Player_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Player::Service, ::common::Empty, ::player::ActionStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Player::Service* service,
             ::grpc::ServerContext* ctx,
             const ::common::Empty* req,
             ::player::ActionStatus* resp) {
               return service->Pause(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Player_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Player::Service, ::common::Empty, ::player::ActionStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Player::Service* service,
             ::grpc::ServerContext* ctx,
             const ::common::Empty* req,
             ::player::ActionStatus* resp) {
               return service->Stop(ctx, req, resp);
             }, this)));
}

Player::Service::~Service() {
}

::grpc::Status Player::Service::PlaySong(::grpc::ServerContext* context, const ::player::SongRequest* request, ::player::ActionStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Player::Service::Play(::grpc::ServerContext* context, const ::common::Empty* request, ::player::ActionStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Player::Service::Pause(::grpc::ServerContext* context, const ::common::Empty* request, ::player::ActionStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Player::Service::Stop(::grpc::ServerContext* context, const ::common::Empty* request, ::player::ActionStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace player

