// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: database.proto
#ifndef GRPC_database_2eproto__INCLUDED
#define GRPC_database_2eproto__INCLUDED

#include "database.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace database {

class Database final {
 public:
  static constexpr char const* service_full_name() {
    return "database.Database";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // artist related functions
    virtual ::grpc::Status GetArtistAlbums(::grpc::ClientContext* context, const ::database::ArtistRequest& request, ::database::AlbumList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::database::AlbumList>> AsyncGetArtistAlbums(::grpc::ClientContext* context, const ::database::ArtistRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::database::AlbumList>>(AsyncGetArtistAlbumsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::database::AlbumList>> PrepareAsyncGetArtistAlbums(::grpc::ClientContext* context, const ::database::ArtistRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::database::AlbumList>>(PrepareAsyncGetArtistAlbumsRaw(context, request, cq));
    }
    virtual ::grpc::Status GetArtistsWithAlbums(::grpc::ClientContext* context, const ::common::Empty& request, ::database::ArtistAlbumMap* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::database::ArtistAlbumMap>> AsyncGetArtistsWithAlbums(::grpc::ClientContext* context, const ::common::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::database::ArtistAlbumMap>>(AsyncGetArtistsWithAlbumsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::database::ArtistAlbumMap>> PrepareAsyncGetArtistsWithAlbums(::grpc::ClientContext* context, const ::common::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::database::ArtistAlbumMap>>(PrepareAsyncGetArtistsWithAlbumsRaw(context, request, cq));
    }
    // getters for all types
    virtual ::grpc::Status GetAlbums(::grpc::ClientContext* context, const ::common::Empty& request, ::database::AlbumList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::database::AlbumList>> AsyncGetAlbums(::grpc::ClientContext* context, const ::common::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::database::AlbumList>>(AsyncGetAlbumsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::database::AlbumList>> PrepareAsyncGetAlbums(::grpc::ClientContext* context, const ::common::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::database::AlbumList>>(PrepareAsyncGetAlbumsRaw(context, request, cq));
    }
    virtual ::grpc::Status GetArtists(::grpc::ClientContext* context, const ::common::Empty& request, ::database::ArtistList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::database::ArtistList>> AsyncGetArtists(::grpc::ClientContext* context, const ::common::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::database::ArtistList>>(AsyncGetArtistsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::database::ArtistList>> PrepareAsyncGetArtists(::grpc::ClientContext* context, const ::common::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::database::ArtistList>>(PrepareAsyncGetArtistsRaw(context, request, cq));
    }
    virtual ::grpc::Status GetGenres(::grpc::ClientContext* context, const ::common::Empty& request, ::database::GenreList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::database::GenreList>> AsyncGetGenres(::grpc::ClientContext* context, const ::common::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::database::GenreList>>(AsyncGetGenresRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::database::GenreList>> PrepareAsyncGetGenres(::grpc::ClientContext* context, const ::common::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::database::GenreList>>(PrepareAsyncGetGenresRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::database::ImageChunk>> GetAlbumCover(::grpc::ClientContext* context, const ::database::AlbumRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::database::ImageChunk>>(GetAlbumCoverRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::database::ImageChunk>> AsyncGetAlbumCover(::grpc::ClientContext* context, const ::database::AlbumRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::database::ImageChunk>>(AsyncGetAlbumCoverRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::database::ImageChunk>> PrepareAsyncGetAlbumCover(::grpc::ClientContext* context, const ::database::AlbumRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::database::ImageChunk>>(PrepareAsyncGetAlbumCoverRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // artist related functions
      virtual void GetArtistAlbums(::grpc::ClientContext* context, const ::database::ArtistRequest* request, ::database::AlbumList* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetArtistAlbums(::grpc::ClientContext* context, const ::database::ArtistRequest* request, ::database::AlbumList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetArtistAlbums(::grpc::ClientContext* context, const ::database::ArtistRequest* request, ::database::AlbumList* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetArtistsWithAlbums(::grpc::ClientContext* context, const ::common::Empty* request, ::database::ArtistAlbumMap* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetArtistsWithAlbums(::grpc::ClientContext* context, const ::common::Empty* request, ::database::ArtistAlbumMap* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetArtistsWithAlbums(::grpc::ClientContext* context, const ::common::Empty* request, ::database::ArtistAlbumMap* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // getters for all types
      virtual void GetAlbums(::grpc::ClientContext* context, const ::common::Empty* request, ::database::AlbumList* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetAlbums(::grpc::ClientContext* context, const ::common::Empty* request, ::database::AlbumList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetAlbums(::grpc::ClientContext* context, const ::common::Empty* request, ::database::AlbumList* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetArtists(::grpc::ClientContext* context, const ::common::Empty* request, ::database::ArtistList* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetArtists(::grpc::ClientContext* context, const ::common::Empty* request, ::database::ArtistList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetArtists(::grpc::ClientContext* context, const ::common::Empty* request, ::database::ArtistList* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetGenres(::grpc::ClientContext* context, const ::common::Empty* request, ::database::GenreList* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetGenres(::grpc::ClientContext* context, const ::common::Empty* request, ::database::GenreList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetGenres(::grpc::ClientContext* context, const ::common::Empty* request, ::database::GenreList* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetAlbumCover(::grpc::ClientContext* context, const ::database::AlbumRequest* request, ::grpc::ClientReadReactor< ::database::ImageChunk>* reactor) = 0;
      #else
      virtual void GetAlbumCover(::grpc::ClientContext* context, const ::database::AlbumRequest* request, ::grpc::experimental::ClientReadReactor< ::database::ImageChunk>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::database::AlbumList>* AsyncGetArtistAlbumsRaw(::grpc::ClientContext* context, const ::database::ArtistRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::database::AlbumList>* PrepareAsyncGetArtistAlbumsRaw(::grpc::ClientContext* context, const ::database::ArtistRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::database::ArtistAlbumMap>* AsyncGetArtistsWithAlbumsRaw(::grpc::ClientContext* context, const ::common::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::database::ArtistAlbumMap>* PrepareAsyncGetArtistsWithAlbumsRaw(::grpc::ClientContext* context, const ::common::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::database::AlbumList>* AsyncGetAlbumsRaw(::grpc::ClientContext* context, const ::common::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::database::AlbumList>* PrepareAsyncGetAlbumsRaw(::grpc::ClientContext* context, const ::common::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::database::ArtistList>* AsyncGetArtistsRaw(::grpc::ClientContext* context, const ::common::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::database::ArtistList>* PrepareAsyncGetArtistsRaw(::grpc::ClientContext* context, const ::common::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::database::GenreList>* AsyncGetGenresRaw(::grpc::ClientContext* context, const ::common::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::database::GenreList>* PrepareAsyncGetGenresRaw(::grpc::ClientContext* context, const ::common::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::database::ImageChunk>* GetAlbumCoverRaw(::grpc::ClientContext* context, const ::database::AlbumRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::database::ImageChunk>* AsyncGetAlbumCoverRaw(::grpc::ClientContext* context, const ::database::AlbumRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::database::ImageChunk>* PrepareAsyncGetAlbumCoverRaw(::grpc::ClientContext* context, const ::database::AlbumRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetArtistAlbums(::grpc::ClientContext* context, const ::database::ArtistRequest& request, ::database::AlbumList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::database::AlbumList>> AsyncGetArtistAlbums(::grpc::ClientContext* context, const ::database::ArtistRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::database::AlbumList>>(AsyncGetArtistAlbumsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::database::AlbumList>> PrepareAsyncGetArtistAlbums(::grpc::ClientContext* context, const ::database::ArtistRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::database::AlbumList>>(PrepareAsyncGetArtistAlbumsRaw(context, request, cq));
    }
    ::grpc::Status GetArtistsWithAlbums(::grpc::ClientContext* context, const ::common::Empty& request, ::database::ArtistAlbumMap* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::database::ArtistAlbumMap>> AsyncGetArtistsWithAlbums(::grpc::ClientContext* context, const ::common::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::database::ArtistAlbumMap>>(AsyncGetArtistsWithAlbumsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::database::ArtistAlbumMap>> PrepareAsyncGetArtistsWithAlbums(::grpc::ClientContext* context, const ::common::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::database::ArtistAlbumMap>>(PrepareAsyncGetArtistsWithAlbumsRaw(context, request, cq));
    }
    ::grpc::Status GetAlbums(::grpc::ClientContext* context, const ::common::Empty& request, ::database::AlbumList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::database::AlbumList>> AsyncGetAlbums(::grpc::ClientContext* context, const ::common::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::database::AlbumList>>(AsyncGetAlbumsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::database::AlbumList>> PrepareAsyncGetAlbums(::grpc::ClientContext* context, const ::common::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::database::AlbumList>>(PrepareAsyncGetAlbumsRaw(context, request, cq));
    }
    ::grpc::Status GetArtists(::grpc::ClientContext* context, const ::common::Empty& request, ::database::ArtistList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::database::ArtistList>> AsyncGetArtists(::grpc::ClientContext* context, const ::common::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::database::ArtistList>>(AsyncGetArtistsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::database::ArtistList>> PrepareAsyncGetArtists(::grpc::ClientContext* context, const ::common::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::database::ArtistList>>(PrepareAsyncGetArtistsRaw(context, request, cq));
    }
    ::grpc::Status GetGenres(::grpc::ClientContext* context, const ::common::Empty& request, ::database::GenreList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::database::GenreList>> AsyncGetGenres(::grpc::ClientContext* context, const ::common::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::database::GenreList>>(AsyncGetGenresRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::database::GenreList>> PrepareAsyncGetGenres(::grpc::ClientContext* context, const ::common::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::database::GenreList>>(PrepareAsyncGetGenresRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::database::ImageChunk>> GetAlbumCover(::grpc::ClientContext* context, const ::database::AlbumRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::database::ImageChunk>>(GetAlbumCoverRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::database::ImageChunk>> AsyncGetAlbumCover(::grpc::ClientContext* context, const ::database::AlbumRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::database::ImageChunk>>(AsyncGetAlbumCoverRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::database::ImageChunk>> PrepareAsyncGetAlbumCover(::grpc::ClientContext* context, const ::database::AlbumRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::database::ImageChunk>>(PrepareAsyncGetAlbumCoverRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetArtistAlbums(::grpc::ClientContext* context, const ::database::ArtistRequest* request, ::database::AlbumList* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetArtistAlbums(::grpc::ClientContext* context, const ::database::ArtistRequest* request, ::database::AlbumList* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetArtistAlbums(::grpc::ClientContext* context, const ::database::ArtistRequest* request, ::database::AlbumList* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetArtistsWithAlbums(::grpc::ClientContext* context, const ::common::Empty* request, ::database::ArtistAlbumMap* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetArtistsWithAlbums(::grpc::ClientContext* context, const ::common::Empty* request, ::database::ArtistAlbumMap* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetArtistsWithAlbums(::grpc::ClientContext* context, const ::common::Empty* request, ::database::ArtistAlbumMap* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetAlbums(::grpc::ClientContext* context, const ::common::Empty* request, ::database::AlbumList* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetAlbums(::grpc::ClientContext* context, const ::common::Empty* request, ::database::AlbumList* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetAlbums(::grpc::ClientContext* context, const ::common::Empty* request, ::database::AlbumList* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetArtists(::grpc::ClientContext* context, const ::common::Empty* request, ::database::ArtistList* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetArtists(::grpc::ClientContext* context, const ::common::Empty* request, ::database::ArtistList* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetArtists(::grpc::ClientContext* context, const ::common::Empty* request, ::database::ArtistList* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetGenres(::grpc::ClientContext* context, const ::common::Empty* request, ::database::GenreList* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetGenres(::grpc::ClientContext* context, const ::common::Empty* request, ::database::GenreList* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetGenres(::grpc::ClientContext* context, const ::common::Empty* request, ::database::GenreList* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetAlbumCover(::grpc::ClientContext* context, const ::database::AlbumRequest* request, ::grpc::ClientReadReactor< ::database::ImageChunk>* reactor) override;
      #else
      void GetAlbumCover(::grpc::ClientContext* context, const ::database::AlbumRequest* request, ::grpc::experimental::ClientReadReactor< ::database::ImageChunk>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::database::AlbumList>* AsyncGetArtistAlbumsRaw(::grpc::ClientContext* context, const ::database::ArtistRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::database::AlbumList>* PrepareAsyncGetArtistAlbumsRaw(::grpc::ClientContext* context, const ::database::ArtistRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::database::ArtistAlbumMap>* AsyncGetArtistsWithAlbumsRaw(::grpc::ClientContext* context, const ::common::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::database::ArtistAlbumMap>* PrepareAsyncGetArtistsWithAlbumsRaw(::grpc::ClientContext* context, const ::common::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::database::AlbumList>* AsyncGetAlbumsRaw(::grpc::ClientContext* context, const ::common::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::database::AlbumList>* PrepareAsyncGetAlbumsRaw(::grpc::ClientContext* context, const ::common::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::database::ArtistList>* AsyncGetArtistsRaw(::grpc::ClientContext* context, const ::common::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::database::ArtistList>* PrepareAsyncGetArtistsRaw(::grpc::ClientContext* context, const ::common::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::database::GenreList>* AsyncGetGenresRaw(::grpc::ClientContext* context, const ::common::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::database::GenreList>* PrepareAsyncGetGenresRaw(::grpc::ClientContext* context, const ::common::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::database::ImageChunk>* GetAlbumCoverRaw(::grpc::ClientContext* context, const ::database::AlbumRequest& request) override;
    ::grpc::ClientAsyncReader< ::database::ImageChunk>* AsyncGetAlbumCoverRaw(::grpc::ClientContext* context, const ::database::AlbumRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::database::ImageChunk>* PrepareAsyncGetAlbumCoverRaw(::grpc::ClientContext* context, const ::database::AlbumRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetArtistAlbums_;
    const ::grpc::internal::RpcMethod rpcmethod_GetArtistsWithAlbums_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAlbums_;
    const ::grpc::internal::RpcMethod rpcmethod_GetArtists_;
    const ::grpc::internal::RpcMethod rpcmethod_GetGenres_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAlbumCover_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // artist related functions
    virtual ::grpc::Status GetArtistAlbums(::grpc::ServerContext* context, const ::database::ArtistRequest* request, ::database::AlbumList* response);
    virtual ::grpc::Status GetArtistsWithAlbums(::grpc::ServerContext* context, const ::common::Empty* request, ::database::ArtistAlbumMap* response);
    // getters for all types
    virtual ::grpc::Status GetAlbums(::grpc::ServerContext* context, const ::common::Empty* request, ::database::AlbumList* response);
    virtual ::grpc::Status GetArtists(::grpc::ServerContext* context, const ::common::Empty* request, ::database::ArtistList* response);
    virtual ::grpc::Status GetGenres(::grpc::ServerContext* context, const ::common::Empty* request, ::database::GenreList* response);
    virtual ::grpc::Status GetAlbumCover(::grpc::ServerContext* context, const ::database::AlbumRequest* request, ::grpc::ServerWriter< ::database::ImageChunk>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetArtistAlbums : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetArtistAlbums() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetArtistAlbums() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtistAlbums(::grpc::ServerContext* /*context*/, const ::database::ArtistRequest* /*request*/, ::database::AlbumList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetArtistAlbums(::grpc::ServerContext* context, ::database::ArtistRequest* request, ::grpc::ServerAsyncResponseWriter< ::database::AlbumList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetArtistsWithAlbums : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetArtistsWithAlbums() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetArtistsWithAlbums() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtistsWithAlbums(::grpc::ServerContext* /*context*/, const ::common::Empty* /*request*/, ::database::ArtistAlbumMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetArtistsWithAlbums(::grpc::ServerContext* context, ::common::Empty* request, ::grpc::ServerAsyncResponseWriter< ::database::ArtistAlbumMap>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAlbums : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAlbums() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetAlbums() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAlbums(::grpc::ServerContext* /*context*/, const ::common::Empty* /*request*/, ::database::AlbumList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAlbums(::grpc::ServerContext* context, ::common::Empty* request, ::grpc::ServerAsyncResponseWriter< ::database::AlbumList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetArtists : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetArtists() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetArtists() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtists(::grpc::ServerContext* /*context*/, const ::common::Empty* /*request*/, ::database::ArtistList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetArtists(::grpc::ServerContext* context, ::common::Empty* request, ::grpc::ServerAsyncResponseWriter< ::database::ArtistList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetGenres : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetGenres() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetGenres() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGenres(::grpc::ServerContext* /*context*/, const ::common::Empty* /*request*/, ::database::GenreList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetGenres(::grpc::ServerContext* context, ::common::Empty* request, ::grpc::ServerAsyncResponseWriter< ::database::GenreList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAlbumCover : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAlbumCover() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetAlbumCover() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAlbumCover(::grpc::ServerContext* /*context*/, const ::database::AlbumRequest* /*request*/, ::grpc::ServerWriter< ::database::ImageChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAlbumCover(::grpc::ServerContext* context, ::database::AlbumRequest* request, ::grpc::ServerAsyncWriter< ::database::ImageChunk>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetArtistAlbums<WithAsyncMethod_GetArtistsWithAlbums<WithAsyncMethod_GetAlbums<WithAsyncMethod_GetArtists<WithAsyncMethod_GetGenres<WithAsyncMethod_GetAlbumCover<Service > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetArtistAlbums : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetArtistAlbums() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::database::ArtistRequest, ::database::AlbumList>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::database::ArtistRequest* request, ::database::AlbumList* response) { return this->GetArtistAlbums(context, request, response); }));}
    void SetMessageAllocatorFor_GetArtistAlbums(
        ::grpc::experimental::MessageAllocator< ::database::ArtistRequest, ::database::AlbumList>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::database::ArtistRequest, ::database::AlbumList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetArtistAlbums() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtistAlbums(::grpc::ServerContext* /*context*/, const ::database::ArtistRequest* /*request*/, ::database::AlbumList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetArtistAlbums(
      ::grpc::CallbackServerContext* /*context*/, const ::database::ArtistRequest* /*request*/, ::database::AlbumList* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetArtistAlbums(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::database::ArtistRequest* /*request*/, ::database::AlbumList* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetArtistsWithAlbums : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetArtistsWithAlbums() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::common::Empty, ::database::ArtistAlbumMap>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::common::Empty* request, ::database::ArtistAlbumMap* response) { return this->GetArtistsWithAlbums(context, request, response); }));}
    void SetMessageAllocatorFor_GetArtistsWithAlbums(
        ::grpc::experimental::MessageAllocator< ::common::Empty, ::database::ArtistAlbumMap>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::common::Empty, ::database::ArtistAlbumMap>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetArtistsWithAlbums() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtistsWithAlbums(::grpc::ServerContext* /*context*/, const ::common::Empty* /*request*/, ::database::ArtistAlbumMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetArtistsWithAlbums(
      ::grpc::CallbackServerContext* /*context*/, const ::common::Empty* /*request*/, ::database::ArtistAlbumMap* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetArtistsWithAlbums(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::common::Empty* /*request*/, ::database::ArtistAlbumMap* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetAlbums : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetAlbums() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::common::Empty, ::database::AlbumList>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::common::Empty* request, ::database::AlbumList* response) { return this->GetAlbums(context, request, response); }));}
    void SetMessageAllocatorFor_GetAlbums(
        ::grpc::experimental::MessageAllocator< ::common::Empty, ::database::AlbumList>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::common::Empty, ::database::AlbumList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetAlbums() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAlbums(::grpc::ServerContext* /*context*/, const ::common::Empty* /*request*/, ::database::AlbumList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetAlbums(
      ::grpc::CallbackServerContext* /*context*/, const ::common::Empty* /*request*/, ::database::AlbumList* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetAlbums(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::common::Empty* /*request*/, ::database::AlbumList* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetArtists : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetArtists() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::common::Empty, ::database::ArtistList>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::common::Empty* request, ::database::ArtistList* response) { return this->GetArtists(context, request, response); }));}
    void SetMessageAllocatorFor_GetArtists(
        ::grpc::experimental::MessageAllocator< ::common::Empty, ::database::ArtistList>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::common::Empty, ::database::ArtistList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetArtists() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtists(::grpc::ServerContext* /*context*/, const ::common::Empty* /*request*/, ::database::ArtistList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetArtists(
      ::grpc::CallbackServerContext* /*context*/, const ::common::Empty* /*request*/, ::database::ArtistList* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetArtists(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::common::Empty* /*request*/, ::database::ArtistList* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetGenres : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetGenres() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::common::Empty, ::database::GenreList>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::common::Empty* request, ::database::GenreList* response) { return this->GetGenres(context, request, response); }));}
    void SetMessageAllocatorFor_GetGenres(
        ::grpc::experimental::MessageAllocator< ::common::Empty, ::database::GenreList>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::common::Empty, ::database::GenreList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetGenres() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGenres(::grpc::ServerContext* /*context*/, const ::common::Empty* /*request*/, ::database::GenreList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetGenres(
      ::grpc::CallbackServerContext* /*context*/, const ::common::Empty* /*request*/, ::database::GenreList* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetGenres(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::common::Empty* /*request*/, ::database::GenreList* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetAlbumCover : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetAlbumCover() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackServerStreamingHandler< ::database::AlbumRequest, ::database::ImageChunk>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::database::AlbumRequest* request) { return this->GetAlbumCover(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_GetAlbumCover() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAlbumCover(::grpc::ServerContext* /*context*/, const ::database::AlbumRequest* /*request*/, ::grpc::ServerWriter< ::database::ImageChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::database::ImageChunk>* GetAlbumCover(
      ::grpc::CallbackServerContext* /*context*/, const ::database::AlbumRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::database::ImageChunk>* GetAlbumCover(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::database::AlbumRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_GetArtistAlbums<ExperimentalWithCallbackMethod_GetArtistsWithAlbums<ExperimentalWithCallbackMethod_GetAlbums<ExperimentalWithCallbackMethod_GetArtists<ExperimentalWithCallbackMethod_GetGenres<ExperimentalWithCallbackMethod_GetAlbumCover<Service > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_GetArtistAlbums<ExperimentalWithCallbackMethod_GetArtistsWithAlbums<ExperimentalWithCallbackMethod_GetAlbums<ExperimentalWithCallbackMethod_GetArtists<ExperimentalWithCallbackMethod_GetGenres<ExperimentalWithCallbackMethod_GetAlbumCover<Service > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetArtistAlbums : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetArtistAlbums() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetArtistAlbums() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtistAlbums(::grpc::ServerContext* /*context*/, const ::database::ArtistRequest* /*request*/, ::database::AlbumList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetArtistsWithAlbums : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetArtistsWithAlbums() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetArtistsWithAlbums() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtistsWithAlbums(::grpc::ServerContext* /*context*/, const ::common::Empty* /*request*/, ::database::ArtistAlbumMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAlbums : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAlbums() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetAlbums() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAlbums(::grpc::ServerContext* /*context*/, const ::common::Empty* /*request*/, ::database::AlbumList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetArtists : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetArtists() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetArtists() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtists(::grpc::ServerContext* /*context*/, const ::common::Empty* /*request*/, ::database::ArtistList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetGenres : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetGenres() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetGenres() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGenres(::grpc::ServerContext* /*context*/, const ::common::Empty* /*request*/, ::database::GenreList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAlbumCover : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAlbumCover() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetAlbumCover() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAlbumCover(::grpc::ServerContext* /*context*/, const ::database::AlbumRequest* /*request*/, ::grpc::ServerWriter< ::database::ImageChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetArtistAlbums : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetArtistAlbums() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetArtistAlbums() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtistAlbums(::grpc::ServerContext* /*context*/, const ::database::ArtistRequest* /*request*/, ::database::AlbumList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetArtistAlbums(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetArtistsWithAlbums : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetArtistsWithAlbums() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetArtistsWithAlbums() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtistsWithAlbums(::grpc::ServerContext* /*context*/, const ::common::Empty* /*request*/, ::database::ArtistAlbumMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetArtistsWithAlbums(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAlbums : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAlbums() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetAlbums() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAlbums(::grpc::ServerContext* /*context*/, const ::common::Empty* /*request*/, ::database::AlbumList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAlbums(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetArtists : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetArtists() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetArtists() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtists(::grpc::ServerContext* /*context*/, const ::common::Empty* /*request*/, ::database::ArtistList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetArtists(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetGenres : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetGenres() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetGenres() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGenres(::grpc::ServerContext* /*context*/, const ::common::Empty* /*request*/, ::database::GenreList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetGenres(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAlbumCover : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAlbumCover() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetAlbumCover() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAlbumCover(::grpc::ServerContext* /*context*/, const ::database::AlbumRequest* /*request*/, ::grpc::ServerWriter< ::database::ImageChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAlbumCover(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetArtistAlbums : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetArtistAlbums() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetArtistAlbums(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetArtistAlbums() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtistAlbums(::grpc::ServerContext* /*context*/, const ::database::ArtistRequest* /*request*/, ::database::AlbumList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetArtistAlbums(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetArtistAlbums(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetArtistsWithAlbums : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetArtistsWithAlbums() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetArtistsWithAlbums(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetArtistsWithAlbums() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtistsWithAlbums(::grpc::ServerContext* /*context*/, const ::common::Empty* /*request*/, ::database::ArtistAlbumMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetArtistsWithAlbums(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetArtistsWithAlbums(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetAlbums : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetAlbums() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAlbums(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetAlbums() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAlbums(::grpc::ServerContext* /*context*/, const ::common::Empty* /*request*/, ::database::AlbumList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetAlbums(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetAlbums(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetArtists : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetArtists() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetArtists(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetArtists() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtists(::grpc::ServerContext* /*context*/, const ::common::Empty* /*request*/, ::database::ArtistList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetArtists(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetArtists(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetGenres : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetGenres() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetGenres(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetGenres() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGenres(::grpc::ServerContext* /*context*/, const ::common::Empty* /*request*/, ::database::GenreList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetGenres(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetGenres(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetAlbumCover : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetAlbumCover() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->GetAlbumCover(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetAlbumCover() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAlbumCover(::grpc::ServerContext* /*context*/, const ::database::AlbumRequest* /*request*/, ::grpc::ServerWriter< ::database::ImageChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetAlbumCover(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* GetAlbumCover(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetArtistAlbums : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetArtistAlbums() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::database::ArtistRequest, ::database::AlbumList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::database::ArtistRequest, ::database::AlbumList>* streamer) {
                       return this->StreamedGetArtistAlbums(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetArtistAlbums() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetArtistAlbums(::grpc::ServerContext* /*context*/, const ::database::ArtistRequest* /*request*/, ::database::AlbumList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetArtistAlbums(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::database::ArtistRequest,::database::AlbumList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetArtistsWithAlbums : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetArtistsWithAlbums() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::common::Empty, ::database::ArtistAlbumMap>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::common::Empty, ::database::ArtistAlbumMap>* streamer) {
                       return this->StreamedGetArtistsWithAlbums(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetArtistsWithAlbums() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetArtistsWithAlbums(::grpc::ServerContext* /*context*/, const ::common::Empty* /*request*/, ::database::ArtistAlbumMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetArtistsWithAlbums(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::common::Empty,::database::ArtistAlbumMap>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAlbums : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAlbums() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::common::Empty, ::database::AlbumList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::common::Empty, ::database::AlbumList>* streamer) {
                       return this->StreamedGetAlbums(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAlbums() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAlbums(::grpc::ServerContext* /*context*/, const ::common::Empty* /*request*/, ::database::AlbumList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAlbums(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::common::Empty,::database::AlbumList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetArtists : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetArtists() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::common::Empty, ::database::ArtistList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::common::Empty, ::database::ArtistList>* streamer) {
                       return this->StreamedGetArtists(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetArtists() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetArtists(::grpc::ServerContext* /*context*/, const ::common::Empty* /*request*/, ::database::ArtistList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetArtists(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::common::Empty,::database::ArtistList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetGenres : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetGenres() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::common::Empty, ::database::GenreList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::common::Empty, ::database::GenreList>* streamer) {
                       return this->StreamedGetGenres(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetGenres() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetGenres(::grpc::ServerContext* /*context*/, const ::common::Empty* /*request*/, ::database::GenreList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetGenres(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::common::Empty,::database::GenreList>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetArtistAlbums<WithStreamedUnaryMethod_GetArtistsWithAlbums<WithStreamedUnaryMethod_GetAlbums<WithStreamedUnaryMethod_GetArtists<WithStreamedUnaryMethod_GetGenres<Service > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetAlbumCover : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetAlbumCover() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::database::AlbumRequest, ::database::ImageChunk>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::database::AlbumRequest, ::database::ImageChunk>* streamer) {
                       return this->StreamedGetAlbumCover(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetAlbumCover() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAlbumCover(::grpc::ServerContext* /*context*/, const ::database::AlbumRequest* /*request*/, ::grpc::ServerWriter< ::database::ImageChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetAlbumCover(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::database::AlbumRequest,::database::ImageChunk>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetAlbumCover<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetArtistAlbums<WithStreamedUnaryMethod_GetArtistsWithAlbums<WithStreamedUnaryMethod_GetAlbums<WithStreamedUnaryMethod_GetArtists<WithStreamedUnaryMethod_GetGenres<WithSplitStreamingMethod_GetAlbumCover<Service > > > > > > StreamedService;
};

}  // namespace database


#endif  // GRPC_database_2eproto__INCLUDED
