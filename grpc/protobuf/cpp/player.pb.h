// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: player.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_player_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_player_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_player_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_player_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_player_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_player_2eproto_metadata_getter(int index);
namespace player {
class ActionStatus;
struct ActionStatusDefaultTypeInternal;
extern ActionStatusDefaultTypeInternal _ActionStatus_default_instance_;
class SongRequest;
struct SongRequestDefaultTypeInternal;
extern SongRequestDefaultTypeInternal _SongRequest_default_instance_;
}  // namespace player
PROTOBUF_NAMESPACE_OPEN
template<> ::player::ActionStatus* Arena::CreateMaybeMessage<::player::ActionStatus>(Arena*);
template<> ::player::SongRequest* Arena::CreateMaybeMessage<::player::SongRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace player {

enum ActionStatusEnum : int {
  OK = 0,
  FAILED = 1,
  INTERNAL_ERROR = 2,
  REQUEST_ERROR = 3,
  ActionStatusEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ActionStatusEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ActionStatusEnum_IsValid(int value);
constexpr ActionStatusEnum ActionStatusEnum_MIN = OK;
constexpr ActionStatusEnum ActionStatusEnum_MAX = REQUEST_ERROR;
constexpr int ActionStatusEnum_ARRAYSIZE = ActionStatusEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActionStatusEnum_descriptor();
template<typename T>
inline const std::string& ActionStatusEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ActionStatusEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ActionStatusEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ActionStatusEnum_descriptor(), enum_t_value);
}
inline bool ActionStatusEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ActionStatusEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ActionStatusEnum>(
    ActionStatusEnum_descriptor(), name, value);
}
// ===================================================================

class SongRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:player.SongRequest) */ {
 public:
  inline SongRequest() : SongRequest(nullptr) {}
  virtual ~SongRequest();
  explicit constexpr SongRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SongRequest(const SongRequest& from);
  SongRequest(SongRequest&& from) noexcept
    : SongRequest() {
    *this = ::std::move(from);
  }

  inline SongRequest& operator=(const SongRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SongRequest& operator=(SongRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SongRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SongRequest* internal_default_instance() {
    return reinterpret_cast<const SongRequest*>(
               &_SongRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SongRequest& a, SongRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SongRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SongRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SongRequest* New() const final {
    return CreateMaybeMessage<SongRequest>(nullptr);
  }

  SongRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SongRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SongRequest& from);
  void MergeFrom(const SongRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SongRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "player.SongRequest";
  }
  protected:
  explicit SongRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_player_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSongFieldNumber = 1,
    kAlbumFieldNumber = 2,
    kArtistFieldNumber = 3,
    kGenreFieldNumber = 4,
  };
  // string song = 1;
  void clear_song();
  const std::string& song() const;
  void set_song(const std::string& value);
  void set_song(std::string&& value);
  void set_song(const char* value);
  void set_song(const char* value, size_t size);
  std::string* mutable_song();
  std::string* release_song();
  void set_allocated_song(std::string* song);
  private:
  const std::string& _internal_song() const;
  void _internal_set_song(const std::string& value);
  std::string* _internal_mutable_song();
  public:

  // string album = 2;
  void clear_album();
  const std::string& album() const;
  void set_album(const std::string& value);
  void set_album(std::string&& value);
  void set_album(const char* value);
  void set_album(const char* value, size_t size);
  std::string* mutable_album();
  std::string* release_album();
  void set_allocated_album(std::string* album);
  private:
  const std::string& _internal_album() const;
  void _internal_set_album(const std::string& value);
  std::string* _internal_mutable_album();
  public:

  // string artist = 3;
  void clear_artist();
  const std::string& artist() const;
  void set_artist(const std::string& value);
  void set_artist(std::string&& value);
  void set_artist(const char* value);
  void set_artist(const char* value, size_t size);
  std::string* mutable_artist();
  std::string* release_artist();
  void set_allocated_artist(std::string* artist);
  private:
  const std::string& _internal_artist() const;
  void _internal_set_artist(const std::string& value);
  std::string* _internal_mutable_artist();
  public:

  // string genre = 4;
  void clear_genre();
  const std::string& genre() const;
  void set_genre(const std::string& value);
  void set_genre(std::string&& value);
  void set_genre(const char* value);
  void set_genre(const char* value, size_t size);
  std::string* mutable_genre();
  std::string* release_genre();
  void set_allocated_genre(std::string* genre);
  private:
  const std::string& _internal_genre() const;
  void _internal_set_genre(const std::string& value);
  std::string* _internal_mutable_genre();
  public:

  // @@protoc_insertion_point(class_scope:player.SongRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr song_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr album_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr artist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr genre_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_player_2eproto;
};
// -------------------------------------------------------------------

class ActionStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:player.ActionStatus) */ {
 public:
  inline ActionStatus() : ActionStatus(nullptr) {}
  virtual ~ActionStatus();
  explicit constexpr ActionStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActionStatus(const ActionStatus& from);
  ActionStatus(ActionStatus&& from) noexcept
    : ActionStatus() {
    *this = ::std::move(from);
  }

  inline ActionStatus& operator=(const ActionStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActionStatus& operator=(ActionStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActionStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActionStatus* internal_default_instance() {
    return reinterpret_cast<const ActionStatus*>(
               &_ActionStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ActionStatus& a, ActionStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ActionStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActionStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActionStatus* New() const final {
    return CreateMaybeMessage<ActionStatus>(nullptr);
  }

  ActionStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActionStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActionStatus& from);
  void MergeFrom(const ActionStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActionStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "player.ActionStatus";
  }
  protected:
  explicit ActionStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_player_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .player.ActionStatusEnum status = 1;
  void clear_status();
  ::player::ActionStatusEnum status() const;
  void set_status(::player::ActionStatusEnum value);
  private:
  ::player::ActionStatusEnum _internal_status() const;
  void _internal_set_status(::player::ActionStatusEnum value);
  public:

  // @@protoc_insertion_point(class_scope:player.ActionStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_player_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SongRequest

// string song = 1;
inline void SongRequest::clear_song() {
  song_.ClearToEmpty();
}
inline const std::string& SongRequest::song() const {
  // @@protoc_insertion_point(field_get:player.SongRequest.song)
  return _internal_song();
}
inline void SongRequest::set_song(const std::string& value) {
  _internal_set_song(value);
  // @@protoc_insertion_point(field_set:player.SongRequest.song)
}
inline std::string* SongRequest::mutable_song() {
  // @@protoc_insertion_point(field_mutable:player.SongRequest.song)
  return _internal_mutable_song();
}
inline const std::string& SongRequest::_internal_song() const {
  return song_.Get();
}
inline void SongRequest::_internal_set_song(const std::string& value) {
  
  song_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SongRequest::set_song(std::string&& value) {
  
  song_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:player.SongRequest.song)
}
inline void SongRequest::set_song(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  song_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:player.SongRequest.song)
}
inline void SongRequest::set_song(const char* value,
    size_t size) {
  
  song_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:player.SongRequest.song)
}
inline std::string* SongRequest::_internal_mutable_song() {
  
  return song_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SongRequest::release_song() {
  // @@protoc_insertion_point(field_release:player.SongRequest.song)
  return song_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SongRequest::set_allocated_song(std::string* song) {
  if (song != nullptr) {
    
  } else {
    
  }
  song_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), song,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:player.SongRequest.song)
}

// string album = 2;
inline void SongRequest::clear_album() {
  album_.ClearToEmpty();
}
inline const std::string& SongRequest::album() const {
  // @@protoc_insertion_point(field_get:player.SongRequest.album)
  return _internal_album();
}
inline void SongRequest::set_album(const std::string& value) {
  _internal_set_album(value);
  // @@protoc_insertion_point(field_set:player.SongRequest.album)
}
inline std::string* SongRequest::mutable_album() {
  // @@protoc_insertion_point(field_mutable:player.SongRequest.album)
  return _internal_mutable_album();
}
inline const std::string& SongRequest::_internal_album() const {
  return album_.Get();
}
inline void SongRequest::_internal_set_album(const std::string& value) {
  
  album_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SongRequest::set_album(std::string&& value) {
  
  album_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:player.SongRequest.album)
}
inline void SongRequest::set_album(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  album_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:player.SongRequest.album)
}
inline void SongRequest::set_album(const char* value,
    size_t size) {
  
  album_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:player.SongRequest.album)
}
inline std::string* SongRequest::_internal_mutable_album() {
  
  return album_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SongRequest::release_album() {
  // @@protoc_insertion_point(field_release:player.SongRequest.album)
  return album_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SongRequest::set_allocated_album(std::string* album) {
  if (album != nullptr) {
    
  } else {
    
  }
  album_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), album,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:player.SongRequest.album)
}

// string artist = 3;
inline void SongRequest::clear_artist() {
  artist_.ClearToEmpty();
}
inline const std::string& SongRequest::artist() const {
  // @@protoc_insertion_point(field_get:player.SongRequest.artist)
  return _internal_artist();
}
inline void SongRequest::set_artist(const std::string& value) {
  _internal_set_artist(value);
  // @@protoc_insertion_point(field_set:player.SongRequest.artist)
}
inline std::string* SongRequest::mutable_artist() {
  // @@protoc_insertion_point(field_mutable:player.SongRequest.artist)
  return _internal_mutable_artist();
}
inline const std::string& SongRequest::_internal_artist() const {
  return artist_.Get();
}
inline void SongRequest::_internal_set_artist(const std::string& value) {
  
  artist_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SongRequest::set_artist(std::string&& value) {
  
  artist_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:player.SongRequest.artist)
}
inline void SongRequest::set_artist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  artist_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:player.SongRequest.artist)
}
inline void SongRequest::set_artist(const char* value,
    size_t size) {
  
  artist_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:player.SongRequest.artist)
}
inline std::string* SongRequest::_internal_mutable_artist() {
  
  return artist_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SongRequest::release_artist() {
  // @@protoc_insertion_point(field_release:player.SongRequest.artist)
  return artist_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SongRequest::set_allocated_artist(std::string* artist) {
  if (artist != nullptr) {
    
  } else {
    
  }
  artist_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), artist,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:player.SongRequest.artist)
}

// string genre = 4;
inline void SongRequest::clear_genre() {
  genre_.ClearToEmpty();
}
inline const std::string& SongRequest::genre() const {
  // @@protoc_insertion_point(field_get:player.SongRequest.genre)
  return _internal_genre();
}
inline void SongRequest::set_genre(const std::string& value) {
  _internal_set_genre(value);
  // @@protoc_insertion_point(field_set:player.SongRequest.genre)
}
inline std::string* SongRequest::mutable_genre() {
  // @@protoc_insertion_point(field_mutable:player.SongRequest.genre)
  return _internal_mutable_genre();
}
inline const std::string& SongRequest::_internal_genre() const {
  return genre_.Get();
}
inline void SongRequest::_internal_set_genre(const std::string& value) {
  
  genre_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SongRequest::set_genre(std::string&& value) {
  
  genre_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:player.SongRequest.genre)
}
inline void SongRequest::set_genre(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  genre_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:player.SongRequest.genre)
}
inline void SongRequest::set_genre(const char* value,
    size_t size) {
  
  genre_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:player.SongRequest.genre)
}
inline std::string* SongRequest::_internal_mutable_genre() {
  
  return genre_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SongRequest::release_genre() {
  // @@protoc_insertion_point(field_release:player.SongRequest.genre)
  return genre_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SongRequest::set_allocated_genre(std::string* genre) {
  if (genre != nullptr) {
    
  } else {
    
  }
  genre_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), genre,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:player.SongRequest.genre)
}

// -------------------------------------------------------------------

// ActionStatus

// .player.ActionStatusEnum status = 1;
inline void ActionStatus::clear_status() {
  status_ = 0;
}
inline ::player::ActionStatusEnum ActionStatus::_internal_status() const {
  return static_cast< ::player::ActionStatusEnum >(status_);
}
inline ::player::ActionStatusEnum ActionStatus::status() const {
  // @@protoc_insertion_point(field_get:player.ActionStatus.status)
  return _internal_status();
}
inline void ActionStatus::_internal_set_status(::player::ActionStatusEnum value) {
  
  status_ = value;
}
inline void ActionStatus::set_status(::player::ActionStatusEnum value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:player.ActionStatus.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace player

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::player::ActionStatusEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::player::ActionStatusEnum>() {
  return ::player::ActionStatusEnum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_player_2eproto
