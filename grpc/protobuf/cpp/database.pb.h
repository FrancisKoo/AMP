// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: database.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_database_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_database_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_database_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_database_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_database_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_database_2eproto_metadata_getter(int index);
namespace database {
class Album;
struct AlbumDefaultTypeInternal;
extern AlbumDefaultTypeInternal _Album_default_instance_;
class AlbumList;
struct AlbumListDefaultTypeInternal;
extern AlbumListDefaultTypeInternal _AlbumList_default_instance_;
class Artist;
struct ArtistDefaultTypeInternal;
extern ArtistDefaultTypeInternal _Artist_default_instance_;
class ArtistAlbumMap;
struct ArtistAlbumMapDefaultTypeInternal;
extern ArtistAlbumMapDefaultTypeInternal _ArtistAlbumMap_default_instance_;
class ArtistAlbumMap_ArtistAlbumsEntry_DoNotUse;
struct ArtistAlbumMap_ArtistAlbumsEntry_DoNotUseDefaultTypeInternal;
extern ArtistAlbumMap_ArtistAlbumsEntry_DoNotUseDefaultTypeInternal _ArtistAlbumMap_ArtistAlbumsEntry_DoNotUse_default_instance_;
class ArtistList;
struct ArtistListDefaultTypeInternal;
extern ArtistListDefaultTypeInternal _ArtistList_default_instance_;
class ArtistRequest;
struct ArtistRequestDefaultTypeInternal;
extern ArtistRequestDefaultTypeInternal _ArtistRequest_default_instance_;
class Genre;
struct GenreDefaultTypeInternal;
extern GenreDefaultTypeInternal _Genre_default_instance_;
class GenreList;
struct GenreListDefaultTypeInternal;
extern GenreListDefaultTypeInternal _GenreList_default_instance_;
}  // namespace database
PROTOBUF_NAMESPACE_OPEN
template<> ::database::Album* Arena::CreateMaybeMessage<::database::Album>(Arena*);
template<> ::database::AlbumList* Arena::CreateMaybeMessage<::database::AlbumList>(Arena*);
template<> ::database::Artist* Arena::CreateMaybeMessage<::database::Artist>(Arena*);
template<> ::database::ArtistAlbumMap* Arena::CreateMaybeMessage<::database::ArtistAlbumMap>(Arena*);
template<> ::database::ArtistAlbumMap_ArtistAlbumsEntry_DoNotUse* Arena::CreateMaybeMessage<::database::ArtistAlbumMap_ArtistAlbumsEntry_DoNotUse>(Arena*);
template<> ::database::ArtistList* Arena::CreateMaybeMessage<::database::ArtistList>(Arena*);
template<> ::database::ArtistRequest* Arena::CreateMaybeMessage<::database::ArtistRequest>(Arena*);
template<> ::database::Genre* Arena::CreateMaybeMessage<::database::Genre>(Arena*);
template<> ::database::GenreList* Arena::CreateMaybeMessage<::database::GenreList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace database {

// ===================================================================

class Artist PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:database.Artist) */ {
 public:
  inline Artist() : Artist(nullptr) {}
  virtual ~Artist();
  explicit constexpr Artist(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Artist(const Artist& from);
  Artist(Artist&& from) noexcept
    : Artist() {
    *this = ::std::move(from);
  }

  inline Artist& operator=(const Artist& from) {
    CopyFrom(from);
    return *this;
  }
  inline Artist& operator=(Artist&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Artist& default_instance() {
    return *internal_default_instance();
  }
  static inline const Artist* internal_default_instance() {
    return reinterpret_cast<const Artist*>(
               &_Artist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Artist& a, Artist& b) {
    a.Swap(&b);
  }
  inline void Swap(Artist* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Artist* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Artist* New() const final {
    return CreateMaybeMessage<Artist>(nullptr);
  }

  Artist* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Artist>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Artist& from);
  void MergeFrom(const Artist& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Artist* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "database.Artist";
  }
  protected:
  explicit Artist(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_database_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCoverPathFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string cover_path = 2;
  void clear_cover_path();
  const std::string& cover_path() const;
  void set_cover_path(const std::string& value);
  void set_cover_path(std::string&& value);
  void set_cover_path(const char* value);
  void set_cover_path(const char* value, size_t size);
  std::string* mutable_cover_path();
  std::string* release_cover_path();
  void set_allocated_cover_path(std::string* cover_path);
  private:
  const std::string& _internal_cover_path() const;
  void _internal_set_cover_path(const std::string& value);
  std::string* _internal_mutable_cover_path();
  public:

  // @@protoc_insertion_point(class_scope:database.Artist)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cover_path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_database_2eproto;
};
// -------------------------------------------------------------------

class ArtistList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:database.ArtistList) */ {
 public:
  inline ArtistList() : ArtistList(nullptr) {}
  virtual ~ArtistList();
  explicit constexpr ArtistList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArtistList(const ArtistList& from);
  ArtistList(ArtistList&& from) noexcept
    : ArtistList() {
    *this = ::std::move(from);
  }

  inline ArtistList& operator=(const ArtistList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArtistList& operator=(ArtistList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ArtistList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArtistList* internal_default_instance() {
    return reinterpret_cast<const ArtistList*>(
               &_ArtistList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ArtistList& a, ArtistList& b) {
    a.Swap(&b);
  }
  inline void Swap(ArtistList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArtistList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ArtistList* New() const final {
    return CreateMaybeMessage<ArtistList>(nullptr);
  }

  ArtistList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ArtistList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ArtistList& from);
  void MergeFrom(const ArtistList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArtistList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "database.ArtistList";
  }
  protected:
  explicit ArtistList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_database_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArtistsFieldNumber = 1,
  };
  // repeated .database.Artist artists = 1;
  int artists_size() const;
  private:
  int _internal_artists_size() const;
  public:
  void clear_artists();
  ::database::Artist* mutable_artists(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::database::Artist >*
      mutable_artists();
  private:
  const ::database::Artist& _internal_artists(int index) const;
  ::database::Artist* _internal_add_artists();
  public:
  const ::database::Artist& artists(int index) const;
  ::database::Artist* add_artists();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::database::Artist >&
      artists() const;

  // @@protoc_insertion_point(class_scope:database.ArtistList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::database::Artist > artists_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_database_2eproto;
};
// -------------------------------------------------------------------

class ArtistAlbumMap_ArtistAlbumsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ArtistAlbumMap_ArtistAlbumsEntry_DoNotUse, 
    std::string, ::database::Album,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ArtistAlbumMap_ArtistAlbumsEntry_DoNotUse, 
    std::string, ::database::Album,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  ArtistAlbumMap_ArtistAlbumsEntry_DoNotUse();
  explicit constexpr ArtistAlbumMap_ArtistAlbumsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ArtistAlbumMap_ArtistAlbumsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ArtistAlbumMap_ArtistAlbumsEntry_DoNotUse& other);
  static const ArtistAlbumMap_ArtistAlbumsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ArtistAlbumMap_ArtistAlbumsEntry_DoNotUse*>(&_ArtistAlbumMap_ArtistAlbumsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "database.ArtistAlbumMap.ArtistAlbumsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_database_2eproto);
    return ::descriptor_table_database_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class ArtistAlbumMap PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:database.ArtistAlbumMap) */ {
 public:
  inline ArtistAlbumMap() : ArtistAlbumMap(nullptr) {}
  virtual ~ArtistAlbumMap();
  explicit constexpr ArtistAlbumMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArtistAlbumMap(const ArtistAlbumMap& from);
  ArtistAlbumMap(ArtistAlbumMap&& from) noexcept
    : ArtistAlbumMap() {
    *this = ::std::move(from);
  }

  inline ArtistAlbumMap& operator=(const ArtistAlbumMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArtistAlbumMap& operator=(ArtistAlbumMap&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ArtistAlbumMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArtistAlbumMap* internal_default_instance() {
    return reinterpret_cast<const ArtistAlbumMap*>(
               &_ArtistAlbumMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ArtistAlbumMap& a, ArtistAlbumMap& b) {
    a.Swap(&b);
  }
  inline void Swap(ArtistAlbumMap* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArtistAlbumMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ArtistAlbumMap* New() const final {
    return CreateMaybeMessage<ArtistAlbumMap>(nullptr);
  }

  ArtistAlbumMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ArtistAlbumMap>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ArtistAlbumMap& from);
  void MergeFrom(const ArtistAlbumMap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArtistAlbumMap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "database.ArtistAlbumMap";
  }
  protected:
  explicit ArtistAlbumMap(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_database_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kArtistAlbumsFieldNumber = 1,
  };
  // map<string, .database.Album> artist_albums = 1;
  int artist_albums_size() const;
  private:
  int _internal_artist_albums_size() const;
  public:
  void clear_artist_albums();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::database::Album >&
      _internal_artist_albums() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::database::Album >*
      _internal_mutable_artist_albums();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::database::Album >&
      artist_albums() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::database::Album >*
      mutable_artist_albums();

  // @@protoc_insertion_point(class_scope:database.ArtistAlbumMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ArtistAlbumMap_ArtistAlbumsEntry_DoNotUse,
      std::string, ::database::Album,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> artist_albums_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_database_2eproto;
};
// -------------------------------------------------------------------

class Album PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:database.Album) */ {
 public:
  inline Album() : Album(nullptr) {}
  virtual ~Album();
  explicit constexpr Album(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Album(const Album& from);
  Album(Album&& from) noexcept
    : Album() {
    *this = ::std::move(from);
  }

  inline Album& operator=(const Album& from) {
    CopyFrom(from);
    return *this;
  }
  inline Album& operator=(Album&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Album& default_instance() {
    return *internal_default_instance();
  }
  static inline const Album* internal_default_instance() {
    return reinterpret_cast<const Album*>(
               &_Album_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Album& a, Album& b) {
    a.Swap(&b);
  }
  inline void Swap(Album* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Album* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Album* New() const final {
    return CreateMaybeMessage<Album>(nullptr);
  }

  Album* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Album>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Album& from);
  void MergeFrom(const Album& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Album* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "database.Album";
  }
  protected:
  explicit Album(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_database_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kArtistFieldNumber = 2,
    kGenreFieldNumber = 3,
    kFolderFieldNumber = 4,
    kYearFieldNumber = 5,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string artist = 2;
  void clear_artist();
  const std::string& artist() const;
  void set_artist(const std::string& value);
  void set_artist(std::string&& value);
  void set_artist(const char* value);
  void set_artist(const char* value, size_t size);
  std::string* mutable_artist();
  std::string* release_artist();
  void set_allocated_artist(std::string* artist);
  private:
  const std::string& _internal_artist() const;
  void _internal_set_artist(const std::string& value);
  std::string* _internal_mutable_artist();
  public:

  // string genre = 3;
  void clear_genre();
  const std::string& genre() const;
  void set_genre(const std::string& value);
  void set_genre(std::string&& value);
  void set_genre(const char* value);
  void set_genre(const char* value, size_t size);
  std::string* mutable_genre();
  std::string* release_genre();
  void set_allocated_genre(std::string* genre);
  private:
  const std::string& _internal_genre() const;
  void _internal_set_genre(const std::string& value);
  std::string* _internal_mutable_genre();
  public:

  // string folder = 4;
  void clear_folder();
  const std::string& folder() const;
  void set_folder(const std::string& value);
  void set_folder(std::string&& value);
  void set_folder(const char* value);
  void set_folder(const char* value, size_t size);
  std::string* mutable_folder();
  std::string* release_folder();
  void set_allocated_folder(std::string* folder);
  private:
  const std::string& _internal_folder() const;
  void _internal_set_folder(const std::string& value);
  std::string* _internal_mutable_folder();
  public:

  // string year = 5;
  void clear_year();
  const std::string& year() const;
  void set_year(const std::string& value);
  void set_year(std::string&& value);
  void set_year(const char* value);
  void set_year(const char* value, size_t size);
  std::string* mutable_year();
  std::string* release_year();
  void set_allocated_year(std::string* year);
  private:
  const std::string& _internal_year() const;
  void _internal_set_year(const std::string& value);
  std::string* _internal_mutable_year();
  public:

  // @@protoc_insertion_point(class_scope:database.Album)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr artist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr genre_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr folder_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr year_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_database_2eproto;
};
// -------------------------------------------------------------------

class AlbumList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:database.AlbumList) */ {
 public:
  inline AlbumList() : AlbumList(nullptr) {}
  virtual ~AlbumList();
  explicit constexpr AlbumList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AlbumList(const AlbumList& from);
  AlbumList(AlbumList&& from) noexcept
    : AlbumList() {
    *this = ::std::move(from);
  }

  inline AlbumList& operator=(const AlbumList& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlbumList& operator=(AlbumList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlbumList& default_instance() {
    return *internal_default_instance();
  }
  static inline const AlbumList* internal_default_instance() {
    return reinterpret_cast<const AlbumList*>(
               &_AlbumList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AlbumList& a, AlbumList& b) {
    a.Swap(&b);
  }
  inline void Swap(AlbumList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlbumList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlbumList* New() const final {
    return CreateMaybeMessage<AlbumList>(nullptr);
  }

  AlbumList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlbumList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlbumList& from);
  void MergeFrom(const AlbumList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlbumList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "database.AlbumList";
  }
  protected:
  explicit AlbumList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_database_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlbumsFieldNumber = 1,
  };
  // repeated .database.Album albums = 1;
  int albums_size() const;
  private:
  int _internal_albums_size() const;
  public:
  void clear_albums();
  ::database::Album* mutable_albums(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::database::Album >*
      mutable_albums();
  private:
  const ::database::Album& _internal_albums(int index) const;
  ::database::Album* _internal_add_albums();
  public:
  const ::database::Album& albums(int index) const;
  ::database::Album* add_albums();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::database::Album >&
      albums() const;

  // @@protoc_insertion_point(class_scope:database.AlbumList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::database::Album > albums_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_database_2eproto;
};
// -------------------------------------------------------------------

class Genre PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:database.Genre) */ {
 public:
  inline Genre() : Genre(nullptr) {}
  virtual ~Genre();
  explicit constexpr Genre(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Genre(const Genre& from);
  Genre(Genre&& from) noexcept
    : Genre() {
    *this = ::std::move(from);
  }

  inline Genre& operator=(const Genre& from) {
    CopyFrom(from);
    return *this;
  }
  inline Genre& operator=(Genre&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Genre& default_instance() {
    return *internal_default_instance();
  }
  static inline const Genre* internal_default_instance() {
    return reinterpret_cast<const Genre*>(
               &_Genre_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Genre& a, Genre& b) {
    a.Swap(&b);
  }
  inline void Swap(Genre* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Genre* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Genre* New() const final {
    return CreateMaybeMessage<Genre>(nullptr);
  }

  Genre* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Genre>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Genre& from);
  void MergeFrom(const Genre& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Genre* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "database.Genre";
  }
  protected:
  explicit Genre(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_database_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:database.Genre)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_database_2eproto;
};
// -------------------------------------------------------------------

class GenreList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:database.GenreList) */ {
 public:
  inline GenreList() : GenreList(nullptr) {}
  virtual ~GenreList();
  explicit constexpr GenreList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenreList(const GenreList& from);
  GenreList(GenreList&& from) noexcept
    : GenreList() {
    *this = ::std::move(from);
  }

  inline GenreList& operator=(const GenreList& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenreList& operator=(GenreList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GenreList& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenreList* internal_default_instance() {
    return reinterpret_cast<const GenreList*>(
               &_GenreList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GenreList& a, GenreList& b) {
    a.Swap(&b);
  }
  inline void Swap(GenreList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenreList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenreList* New() const final {
    return CreateMaybeMessage<GenreList>(nullptr);
  }

  GenreList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenreList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GenreList& from);
  void MergeFrom(const GenreList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenreList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "database.GenreList";
  }
  protected:
  explicit GenreList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_database_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGenresFieldNumber = 1,
  };
  // repeated .database.Genre genres = 1;
  int genres_size() const;
  private:
  int _internal_genres_size() const;
  public:
  void clear_genres();
  ::database::Genre* mutable_genres(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::database::Genre >*
      mutable_genres();
  private:
  const ::database::Genre& _internal_genres(int index) const;
  ::database::Genre* _internal_add_genres();
  public:
  const ::database::Genre& genres(int index) const;
  ::database::Genre* add_genres();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::database::Genre >&
      genres() const;

  // @@protoc_insertion_point(class_scope:database.GenreList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::database::Genre > genres_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_database_2eproto;
};
// -------------------------------------------------------------------

class ArtistRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:database.ArtistRequest) */ {
 public:
  inline ArtistRequest() : ArtistRequest(nullptr) {}
  virtual ~ArtistRequest();
  explicit constexpr ArtistRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArtistRequest(const ArtistRequest& from);
  ArtistRequest(ArtistRequest&& from) noexcept
    : ArtistRequest() {
    *this = ::std::move(from);
  }

  inline ArtistRequest& operator=(const ArtistRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArtistRequest& operator=(ArtistRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ArtistRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArtistRequest* internal_default_instance() {
    return reinterpret_cast<const ArtistRequest*>(
               &_ArtistRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ArtistRequest& a, ArtistRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ArtistRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArtistRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ArtistRequest* New() const final {
    return CreateMaybeMessage<ArtistRequest>(nullptr);
  }

  ArtistRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ArtistRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ArtistRequest& from);
  void MergeFrom(const ArtistRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArtistRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "database.ArtistRequest";
  }
  protected:
  explicit ArtistRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_database_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:database.ArtistRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_database_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Artist

// string name = 1;
inline void Artist::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Artist::name() const {
  // @@protoc_insertion_point(field_get:database.Artist.name)
  return _internal_name();
}
inline void Artist::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:database.Artist.name)
}
inline std::string* Artist::mutable_name() {
  // @@protoc_insertion_point(field_mutable:database.Artist.name)
  return _internal_mutable_name();
}
inline const std::string& Artist::_internal_name() const {
  return name_.Get();
}
inline void Artist::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Artist::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:database.Artist.name)
}
inline void Artist::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:database.Artist.name)
}
inline void Artist::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:database.Artist.name)
}
inline std::string* Artist::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Artist::release_name() {
  // @@protoc_insertion_point(field_release:database.Artist.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Artist::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:database.Artist.name)
}

// string cover_path = 2;
inline void Artist::clear_cover_path() {
  cover_path_.ClearToEmpty();
}
inline const std::string& Artist::cover_path() const {
  // @@protoc_insertion_point(field_get:database.Artist.cover_path)
  return _internal_cover_path();
}
inline void Artist::set_cover_path(const std::string& value) {
  _internal_set_cover_path(value);
  // @@protoc_insertion_point(field_set:database.Artist.cover_path)
}
inline std::string* Artist::mutable_cover_path() {
  // @@protoc_insertion_point(field_mutable:database.Artist.cover_path)
  return _internal_mutable_cover_path();
}
inline const std::string& Artist::_internal_cover_path() const {
  return cover_path_.Get();
}
inline void Artist::_internal_set_cover_path(const std::string& value) {
  
  cover_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Artist::set_cover_path(std::string&& value) {
  
  cover_path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:database.Artist.cover_path)
}
inline void Artist::set_cover_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cover_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:database.Artist.cover_path)
}
inline void Artist::set_cover_path(const char* value,
    size_t size) {
  
  cover_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:database.Artist.cover_path)
}
inline std::string* Artist::_internal_mutable_cover_path() {
  
  return cover_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Artist::release_cover_path() {
  // @@protoc_insertion_point(field_release:database.Artist.cover_path)
  return cover_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Artist::set_allocated_cover_path(std::string* cover_path) {
  if (cover_path != nullptr) {
    
  } else {
    
  }
  cover_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cover_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:database.Artist.cover_path)
}

// -------------------------------------------------------------------

// ArtistList

// repeated .database.Artist artists = 1;
inline int ArtistList::_internal_artists_size() const {
  return artists_.size();
}
inline int ArtistList::artists_size() const {
  return _internal_artists_size();
}
inline void ArtistList::clear_artists() {
  artists_.Clear();
}
inline ::database::Artist* ArtistList::mutable_artists(int index) {
  // @@protoc_insertion_point(field_mutable:database.ArtistList.artists)
  return artists_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::database::Artist >*
ArtistList::mutable_artists() {
  // @@protoc_insertion_point(field_mutable_list:database.ArtistList.artists)
  return &artists_;
}
inline const ::database::Artist& ArtistList::_internal_artists(int index) const {
  return artists_.Get(index);
}
inline const ::database::Artist& ArtistList::artists(int index) const {
  // @@protoc_insertion_point(field_get:database.ArtistList.artists)
  return _internal_artists(index);
}
inline ::database::Artist* ArtistList::_internal_add_artists() {
  return artists_.Add();
}
inline ::database::Artist* ArtistList::add_artists() {
  // @@protoc_insertion_point(field_add:database.ArtistList.artists)
  return _internal_add_artists();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::database::Artist >&
ArtistList::artists() const {
  // @@protoc_insertion_point(field_list:database.ArtistList.artists)
  return artists_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ArtistAlbumMap

// map<string, .database.Album> artist_albums = 1;
inline int ArtistAlbumMap::_internal_artist_albums_size() const {
  return artist_albums_.size();
}
inline int ArtistAlbumMap::artist_albums_size() const {
  return _internal_artist_albums_size();
}
inline void ArtistAlbumMap::clear_artist_albums() {
  artist_albums_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::database::Album >&
ArtistAlbumMap::_internal_artist_albums() const {
  return artist_albums_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::database::Album >&
ArtistAlbumMap::artist_albums() const {
  // @@protoc_insertion_point(field_map:database.ArtistAlbumMap.artist_albums)
  return _internal_artist_albums();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::database::Album >*
ArtistAlbumMap::_internal_mutable_artist_albums() {
  return artist_albums_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::database::Album >*
ArtistAlbumMap::mutable_artist_albums() {
  // @@protoc_insertion_point(field_mutable_map:database.ArtistAlbumMap.artist_albums)
  return _internal_mutable_artist_albums();
}

// -------------------------------------------------------------------

// Album

// string name = 1;
inline void Album::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Album::name() const {
  // @@protoc_insertion_point(field_get:database.Album.name)
  return _internal_name();
}
inline void Album::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:database.Album.name)
}
inline std::string* Album::mutable_name() {
  // @@protoc_insertion_point(field_mutable:database.Album.name)
  return _internal_mutable_name();
}
inline const std::string& Album::_internal_name() const {
  return name_.Get();
}
inline void Album::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Album::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:database.Album.name)
}
inline void Album::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:database.Album.name)
}
inline void Album::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:database.Album.name)
}
inline std::string* Album::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Album::release_name() {
  // @@protoc_insertion_point(field_release:database.Album.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Album::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:database.Album.name)
}

// string artist = 2;
inline void Album::clear_artist() {
  artist_.ClearToEmpty();
}
inline const std::string& Album::artist() const {
  // @@protoc_insertion_point(field_get:database.Album.artist)
  return _internal_artist();
}
inline void Album::set_artist(const std::string& value) {
  _internal_set_artist(value);
  // @@protoc_insertion_point(field_set:database.Album.artist)
}
inline std::string* Album::mutable_artist() {
  // @@protoc_insertion_point(field_mutable:database.Album.artist)
  return _internal_mutable_artist();
}
inline const std::string& Album::_internal_artist() const {
  return artist_.Get();
}
inline void Album::_internal_set_artist(const std::string& value) {
  
  artist_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Album::set_artist(std::string&& value) {
  
  artist_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:database.Album.artist)
}
inline void Album::set_artist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  artist_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:database.Album.artist)
}
inline void Album::set_artist(const char* value,
    size_t size) {
  
  artist_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:database.Album.artist)
}
inline std::string* Album::_internal_mutable_artist() {
  
  return artist_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Album::release_artist() {
  // @@protoc_insertion_point(field_release:database.Album.artist)
  return artist_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Album::set_allocated_artist(std::string* artist) {
  if (artist != nullptr) {
    
  } else {
    
  }
  artist_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), artist,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:database.Album.artist)
}

// string genre = 3;
inline void Album::clear_genre() {
  genre_.ClearToEmpty();
}
inline const std::string& Album::genre() const {
  // @@protoc_insertion_point(field_get:database.Album.genre)
  return _internal_genre();
}
inline void Album::set_genre(const std::string& value) {
  _internal_set_genre(value);
  // @@protoc_insertion_point(field_set:database.Album.genre)
}
inline std::string* Album::mutable_genre() {
  // @@protoc_insertion_point(field_mutable:database.Album.genre)
  return _internal_mutable_genre();
}
inline const std::string& Album::_internal_genre() const {
  return genre_.Get();
}
inline void Album::_internal_set_genre(const std::string& value) {
  
  genre_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Album::set_genre(std::string&& value) {
  
  genre_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:database.Album.genre)
}
inline void Album::set_genre(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  genre_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:database.Album.genre)
}
inline void Album::set_genre(const char* value,
    size_t size) {
  
  genre_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:database.Album.genre)
}
inline std::string* Album::_internal_mutable_genre() {
  
  return genre_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Album::release_genre() {
  // @@protoc_insertion_point(field_release:database.Album.genre)
  return genre_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Album::set_allocated_genre(std::string* genre) {
  if (genre != nullptr) {
    
  } else {
    
  }
  genre_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), genre,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:database.Album.genre)
}

// string folder = 4;
inline void Album::clear_folder() {
  folder_.ClearToEmpty();
}
inline const std::string& Album::folder() const {
  // @@protoc_insertion_point(field_get:database.Album.folder)
  return _internal_folder();
}
inline void Album::set_folder(const std::string& value) {
  _internal_set_folder(value);
  // @@protoc_insertion_point(field_set:database.Album.folder)
}
inline std::string* Album::mutable_folder() {
  // @@protoc_insertion_point(field_mutable:database.Album.folder)
  return _internal_mutable_folder();
}
inline const std::string& Album::_internal_folder() const {
  return folder_.Get();
}
inline void Album::_internal_set_folder(const std::string& value) {
  
  folder_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Album::set_folder(std::string&& value) {
  
  folder_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:database.Album.folder)
}
inline void Album::set_folder(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  folder_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:database.Album.folder)
}
inline void Album::set_folder(const char* value,
    size_t size) {
  
  folder_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:database.Album.folder)
}
inline std::string* Album::_internal_mutable_folder() {
  
  return folder_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Album::release_folder() {
  // @@protoc_insertion_point(field_release:database.Album.folder)
  return folder_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Album::set_allocated_folder(std::string* folder) {
  if (folder != nullptr) {
    
  } else {
    
  }
  folder_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), folder,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:database.Album.folder)
}

// string year = 5;
inline void Album::clear_year() {
  year_.ClearToEmpty();
}
inline const std::string& Album::year() const {
  // @@protoc_insertion_point(field_get:database.Album.year)
  return _internal_year();
}
inline void Album::set_year(const std::string& value) {
  _internal_set_year(value);
  // @@protoc_insertion_point(field_set:database.Album.year)
}
inline std::string* Album::mutable_year() {
  // @@protoc_insertion_point(field_mutable:database.Album.year)
  return _internal_mutable_year();
}
inline const std::string& Album::_internal_year() const {
  return year_.Get();
}
inline void Album::_internal_set_year(const std::string& value) {
  
  year_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Album::set_year(std::string&& value) {
  
  year_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:database.Album.year)
}
inline void Album::set_year(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  year_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:database.Album.year)
}
inline void Album::set_year(const char* value,
    size_t size) {
  
  year_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:database.Album.year)
}
inline std::string* Album::_internal_mutable_year() {
  
  return year_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Album::release_year() {
  // @@protoc_insertion_point(field_release:database.Album.year)
  return year_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Album::set_allocated_year(std::string* year) {
  if (year != nullptr) {
    
  } else {
    
  }
  year_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), year,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:database.Album.year)
}

// -------------------------------------------------------------------

// AlbumList

// repeated .database.Album albums = 1;
inline int AlbumList::_internal_albums_size() const {
  return albums_.size();
}
inline int AlbumList::albums_size() const {
  return _internal_albums_size();
}
inline void AlbumList::clear_albums() {
  albums_.Clear();
}
inline ::database::Album* AlbumList::mutable_albums(int index) {
  // @@protoc_insertion_point(field_mutable:database.AlbumList.albums)
  return albums_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::database::Album >*
AlbumList::mutable_albums() {
  // @@protoc_insertion_point(field_mutable_list:database.AlbumList.albums)
  return &albums_;
}
inline const ::database::Album& AlbumList::_internal_albums(int index) const {
  return albums_.Get(index);
}
inline const ::database::Album& AlbumList::albums(int index) const {
  // @@protoc_insertion_point(field_get:database.AlbumList.albums)
  return _internal_albums(index);
}
inline ::database::Album* AlbumList::_internal_add_albums() {
  return albums_.Add();
}
inline ::database::Album* AlbumList::add_albums() {
  // @@protoc_insertion_point(field_add:database.AlbumList.albums)
  return _internal_add_albums();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::database::Album >&
AlbumList::albums() const {
  // @@protoc_insertion_point(field_list:database.AlbumList.albums)
  return albums_;
}

// -------------------------------------------------------------------

// Genre

// string name = 1;
inline void Genre::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Genre::name() const {
  // @@protoc_insertion_point(field_get:database.Genre.name)
  return _internal_name();
}
inline void Genre::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:database.Genre.name)
}
inline std::string* Genre::mutable_name() {
  // @@protoc_insertion_point(field_mutable:database.Genre.name)
  return _internal_mutable_name();
}
inline const std::string& Genre::_internal_name() const {
  return name_.Get();
}
inline void Genre::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Genre::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:database.Genre.name)
}
inline void Genre::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:database.Genre.name)
}
inline void Genre::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:database.Genre.name)
}
inline std::string* Genre::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Genre::release_name() {
  // @@protoc_insertion_point(field_release:database.Genre.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Genre::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:database.Genre.name)
}

// -------------------------------------------------------------------

// GenreList

// repeated .database.Genre genres = 1;
inline int GenreList::_internal_genres_size() const {
  return genres_.size();
}
inline int GenreList::genres_size() const {
  return _internal_genres_size();
}
inline void GenreList::clear_genres() {
  genres_.Clear();
}
inline ::database::Genre* GenreList::mutable_genres(int index) {
  // @@protoc_insertion_point(field_mutable:database.GenreList.genres)
  return genres_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::database::Genre >*
GenreList::mutable_genres() {
  // @@protoc_insertion_point(field_mutable_list:database.GenreList.genres)
  return &genres_;
}
inline const ::database::Genre& GenreList::_internal_genres(int index) const {
  return genres_.Get(index);
}
inline const ::database::Genre& GenreList::genres(int index) const {
  // @@protoc_insertion_point(field_get:database.GenreList.genres)
  return _internal_genres(index);
}
inline ::database::Genre* GenreList::_internal_add_genres() {
  return genres_.Add();
}
inline ::database::Genre* GenreList::add_genres() {
  // @@protoc_insertion_point(field_add:database.GenreList.genres)
  return _internal_add_genres();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::database::Genre >&
GenreList::genres() const {
  // @@protoc_insertion_point(field_list:database.GenreList.genres)
  return genres_;
}

// -------------------------------------------------------------------

// ArtistRequest

// string name = 1;
inline void ArtistRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ArtistRequest::name() const {
  // @@protoc_insertion_point(field_get:database.ArtistRequest.name)
  return _internal_name();
}
inline void ArtistRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:database.ArtistRequest.name)
}
inline std::string* ArtistRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:database.ArtistRequest.name)
  return _internal_mutable_name();
}
inline const std::string& ArtistRequest::_internal_name() const {
  return name_.Get();
}
inline void ArtistRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ArtistRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:database.ArtistRequest.name)
}
inline void ArtistRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:database.ArtistRequest.name)
}
inline void ArtistRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:database.ArtistRequest.name)
}
inline std::string* ArtistRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ArtistRequest::release_name() {
  // @@protoc_insertion_point(field_release:database.ArtistRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ArtistRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:database.ArtistRequest.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace database

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_database_2eproto
